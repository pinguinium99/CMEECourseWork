library(ggplot2)
View(MyData)
View(MyDF)
ggplot(MyDF, aes())+
geom_histogram(aes(Preditor.mass, colour = MyDF$Type.of.feeding.interaction))
ggplot(MyDF, aes())+
geom_histogram(aes(Predator.mass, colour = MyDF$Type.of.feeding.interaction))
ggplot(MyDF, aes())+
geom_histogram(aes(log10(Predator.mass), colour = MyDF$Type.of.feeding.interaction))
feedint <- MyDF %>% group_by(Type.of.feeding.interaction)
View(feedint)
View(feedint)
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
hist(log(MyDF$Prey.mass), # Plot prey weights
col = rgb(0, 0, 1, 0.5),
add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
graphics.off(); #you can also use dev.off()
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
hist(log(MyDF$Prey.mass), # Plot prey weights
col = rgb(0, 0, 1, 0.5),
add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
par(mfcol=c(5,1))
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
par(mfcol=c(5,1))
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
feedint <- list(levels(MyDF$Type.of.feeding.interaction))
feedint <- levels(MyDF$Type.of.feeding.interaction)
feedint <- unique(MyDF$Type.of.feeding.interaction)
par(mfcol=c(5,1))
for (i in feedint) {
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
par(mfcol=c(1,1))
for (i in feedint) {
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
par(mfcol=c(1,1))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
par(mfcol=c(1,5))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
par(mfcol=c(5,1))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
par(mfcol=c(5,1))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
par(mfcol=c(3,2))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = "Predator")
}
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint[i])
}
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint)
}
par(mfcol=c(3,2))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint[i])
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint[i])
}
)
par(mfcol=c(3,2))
for (i in feedint) {
hist(log10(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint[i])
}
?hist
?subset
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed[i] <- subset(MyDF$Type.of.feeding.interaction)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint[i])
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction = i)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feedint[i])
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction = i)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feed[i])
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction = i)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = feed)
}
feed <- subset(MyDF, Type.of.feeding.interaction == "piscivorous")
feed
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction = i)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count")
}
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count")
}
feed <- subset(MyDF, Type.of.feeding.interaction == "predacious/piscivorous")
feed
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log10(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count")
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count")
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = unique(MyDF$Type.of.feeding.interaction))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = unique(MyDF$Type.of.feeding.interaction))
}
)
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = unique(MyDF$Type.of.feeding.interaction))
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = unique(MyDF$Type.of.feeding.interaction[i]))
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
pdf("../Results/Pred_Subplots.pdf")
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass),
xlab="Body Mass (g)", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
graphics.off();
MyDF <- mutate(MyDF, Ratio = MyDF$Prey.mass/MyDF$Predator.mass)
head(MyDF)
14.30/1540
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Prey.mass),
xlab="Body Mass (g)", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Ratio),
xlab="Body Mass (g)", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Ratio),
xlab="Body Mass Ratio", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(feed$Ratio,
xlab="Body Mass Ratio", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
MyDF <- mutate(MyDF, logRatio = log(MyDF$Prey.mass)/log(MyDF$Predator.mass))
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(feed$logRatio,
xlab="Body Mass Ratio", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
head(MyDF)
pdf("../Results/Pred_Subplots.pdf")
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Predator.mass),
xlab="Body Mass (g)", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
graphics.off();
pdf("../Results/Prey_Subplots.pdf")
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Prey.mass),
xlab="Body Mass (g)", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
graphics.off();
MyDF <- mutate(MyDF, Ratio = MyDF$Prey.mass/MyDF$Predator.mass)
pdf("../Results/SizeRatio_Subplots.pdf")
par(mfcol=c(3,2))
for (i in unique(MyDF$Type.of.feeding.interaction)) {
feed <- subset(MyDF, Type.of.feeding.interaction == i)
hist(log(feed$Ratio),
xlab = "Log Body Mass Ratio", ylab="Count", main = unique(feed$Type.of.feeding.interaction))
}
graphics.off();
meanpred <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)))
View(meanpred)
csvmm <- c[2,3]
csvmm <- as.data.frame(csvmm[2,3])
as.data.frame(csvmm[2,3])
meanpred <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass))) %>%  summarise(mean(log(MyDF$Prey.mass)))
View(meanpred)
meanpred <- rep(NA,3)
meanpred <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass))) %>%  summarise(mean(log(MyDF$Prey.mass)))
meanpred <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)))
View(meanpred)
meanpred <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)), mean(log(MyDF$Prey.mass)))
meanpred <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)), mean(log(MyDF$Ratio)))
View(meanpred)
medians <- MyDF %>%  summarise(median(log(MyDF$Predator.mass)),median(log(MyDF$Prey.mass)), median(log(MyDF$Ratio)))
View(medians)
rbind(means,medians)
)))
means <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)), mean(log(MyDF$Ratio)))
dat <- rbind(means,medians)
setNames(data.frame(matrix(ncol = 3, nrow = 2)), c("log Predator Mass", "log Prey Mass", " log Prey/Predator body mass ratio"))
dat <- setNames(data.frame(matrix(ncol = 3, nrow = 2)), c("log Predator Mass", "log Prey Mass", " log Prey/Predator body mass ratio"))
dat <- setNames(data.frame(matrix(ncol = 3, nrow = 2)), c("log Predator Mass", "log Prey Mass", " log Prey/Predator body mass ratio"))
dat[1,] <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)), mean(log(MyDF$Ratio)))
dat[2,] <- MyDF %>%  summarise(median(log(MyDF$Predator.mass)),median(log(MyDF$Prey.mass)), median(log(MyDF$Ratio)))
View(dat)
?setNames
dat <- row.names(c("Mean"."Median"))
dat <- row.names(c("Mean","Median"))
dat <- row.names(dat,c("Mean","Median"))
dat <- row.names(c("Mean","Median"))
dat <- setNames(data.frame(matrix(ncol = 3, nrow = 2)), c("log Predator Mass", "log Prey Mass", " log Prey/Predator body mass ratio"))
dat <- row.names(c("Mean","Median"))
dat[1,] <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)), mean(log(MyDF$Ratio)))
?row.names
dat <- setNames(data.frame(matrix(ncol = 3, nrow = 2)), c("log Predator Mass", "log Prey Mass", " log Prey/Predator body mass ratio"))
row.names(dat) <- c("Mean","Median")
View(dat)
dat[1,] <- MyDF %>%  summarise(mean(log(MyDF$Predator.mass)),mean(log(MyDF$Prey.mass)), mean(log(MyDF$Ratio)))
dat[2,] <- MyDF %>%  summarise(median(log(MyDF$Predator.mass)),median(log(MyDF$Prey.mass)), median(log(MyDF$Ratio)))
write.csv(dat, "../Results/PP_Results.csv")
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
pdf("../Results/Girko.pdf")
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
library(ggplot2)
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
pdf("../Results/Girko.pdf")
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
View(p)
p
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
library(ggplot2)
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
pdf("../Results/Girko.pdf")
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
p
pdf("../Results/Girko.pdf")
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
print(p)
0p
p
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
View(eigDF)
View(ellDF)
library(ggplot2)
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
p
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
p
library(ggplot2)
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
N <- 250 # Assign size of the matrix
M <- matrix(rnorm(N * N), N, N) # Build the matrix
eigvals <- eigen(M)$values # Find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals)) # Build a dataframe
my_radius <- sqrt(N) # The radius of the circle is sqrt(N)
ellDF <- build_ellipse(my_radius, my_radius) # Dataframe to plot the ellipse
names(ellDF) <- c("Real", "Imaginary") # rename the columns
pdf("../Results/Girko.pdf")
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
p
ggplot(eigDF, aes(x = Real, y = Imaginary))+
geom_point(shape = I(3)) +
theme(legend.position = "none")+
geom_hline(aes(yintercept = 0))+
geom_vline(aes(xintercept = 0))+
geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
plot(ellDF)
plot(eigvals)
pdf("../Results/Girko.pdf")
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
geom_point(shape = I(3)) +
theme(legend.position = "none")
# now add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))
# finally, add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p
